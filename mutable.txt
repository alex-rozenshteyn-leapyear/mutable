-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Piecewise-mutable references for product types
--   
--   Please see the README on GitHub at
--   <a>https://github.com/mstksg/mutable#readme</a>
@package mutable
@version 0.1.0.0


-- | Provides <a>Ref</a> instances for various data types, as well as
--   automatic derivation of instances. See <a>Data.Mutable</a> for more
--   information.
module Data.Mutable.Instances

-- | Single linked list cell
data ListRefCell m a
MutNil :: ListRefCell m a
MutCons :: Ref m a -> Ref m [a] -> ListRefCell m a

-- | Uncons mutable linked list into a <a>ListRefCell</a>.
unconsListRef :: PrimMonad m => Ref m [a] -> m (ListRefCell m a)

-- | Cons the contents of a <a>ListRefCell</a> into a mutable linked list.
consListRef :: PrimMonad m => ListRefCell m a -> m (Ref m [a])

-- | <a>Ref</a> for components in a vinyl <a>Rec</a>.
newtype RecRef m f a
RecRef :: Ref m (f a) -> RecRef m f a
[getRecRef] :: RecRef m f a -> Ref m (f a)

-- | Automatically generate a piecewise mutable reference for any
--   <a>Generic</a> instance.
--   
--   <pre>
--   -- | any <a>Generic</a> instance
--   data Foo = Foo { fInt :: Int, fDouble :: Double }
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 4.5
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> #fInt) r
--   3
--   ghci&gt; <a>copyPart</a> (fieldMut #fDouble) 1.23
--   ghci&gt; freezeRef r
--   Foo 3 1.23
--   </pre>
--   
--   Note that this is basically just a bunch of tupled refs for a product
--   type. For a sum type (with multiple constructors), an extra layer of
--   indirection is added to account for the dynamically changable shape.
--   
--   See <a>fieldMut</a>/<a>posMut</a> for ways to inspect and mutate the
--   internals of this type (as demonstrated above).
newtype GRef m a
GRef :: GRef_ m (Rep a) () -> GRef m a
[unGRef] :: GRef m a -> GRef_ m (Rep a) ()

-- | Default <a>thawRef</a> for <a>GRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GRef</a> as the
--   <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GRef</a> m a</tt> just as a normal data type, independent of
--   the <a>Ref</a> class. See documentation for <a>GRef</a> for more
--   information.
gThawRef :: (Generic a, GMutable m (Rep a)) => a -> m (GRef m a)

-- | Default <a>freezeRef</a> for <a>GRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GRef</a> as the
--   <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GRef</a> m a</tt> just as a normal data type, independent of
--   the <a>Ref</a> class. See documentation for <a>GRef</a> for more
--   information.
gFreezeRef :: (Generic a, GMutable m (Rep a)) => GRef m a -> m a

-- | Default <a>copyRef</a> for <a>GRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GRef</a> as the
--   <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GRef</a> m a</tt> just as a normal data type, independent of
--   the <a>Ref</a> class. See documentation for <a>GRef</a> for more
--   information.
gCopyRef :: (Generic a, GMutable m (Rep a)) => GRef m a -> a -> m ()

-- | Class for automatic generation of <a>Ref</a> for <a>Generic</a>
--   instances. See <a>GRef</a> for more information.
class Monad m => GMutable m f where {
    type family GRef_ m f = (u :: k -> Type) | u -> f;
}

-- | Default <a>copyRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
thawHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z Identity -> m (z (RefFor m))

-- | Default <a>freezeRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
freezeHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z (RefFor m) -> m (z Identity)

-- | Default <a>copyRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
copyHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z (RefFor m) -> z Identity -> m ()

-- | A <a>Ref</a> that works by using the <a>Mutable</a> instance of an
--   equivalent type. This is useful for newtype wrappers, so you can use
--   the underlying data type's <a>Mutable</a> instance.
--   
--   <pre>
--   newtype MyVec = MyVec (<a>Vector</a> Double)
--   
--   instance <a>Mutable</a> m MyVec where
--       type <a>Ref</a> m MyVec = <a>CoerceRef</a> m s (<a>Vector</a> Double)
--   </pre>
--   
--   The <tt>Ref m MyVec</tt> uses the a <tt><a>MVector</a> Double</tt>
--   under the hood.
--   
--   It's essentially a special case of <a>GRef</a> for newtypes.
newtype CoerceRef m s a
CoerceRef :: Ref m a -> CoerceRef m s a
[getCoerceRef] :: CoerceRef m s a -> Ref m a

-- | Default <a>thawRef</a> for <a>CoerceRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>CoerceRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>CoerceRef</a> m s a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>CoerceRef</a> for more information.
thawCoerce :: (Coercible s a, Mutable m a) => s -> m (CoerceRef m s a)

-- | Default <a>freezeRef</a> for <a>CoerceRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>CoerceRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>CoerceRef</a> m s a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>CoerceRef</a> for more information.
freezeCoerce :: (Coercible s a, Mutable m a) => CoerceRef m s a -> m s

-- | Default <a>copyRef</a> for <a>CoerceRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>CoerceRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>CoerceRef</a> m s a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>CoerceRef</a> for more information.
copyCoerce :: (Coercible s a, Mutable m a) => CoerceRef m s a -> s -> m ()

-- | A <a>Ref</a> that works for any instance of <a>Traversable</a>, by
--   using the fields of the <a>Traversable</a> instance to <i>purely</i>
--   store mutable references.
--   
--   Copying and modifying semantics can be a bit funky.
--   
--   <ul>
--   <li>If copying a shorter item into a longer item ref, the "leftovers"
--   items in the longer item are unchanged.</li>
--   <li>If copying a longer item into a shorter item ref, the leftover
--   items are unchanged.</li>
--   </ul>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawTraverse</a> [1..10]
--   ghci&gt; <a>copyTraverse</a> r [0,0,0,0]
--   ghci&gt; <a>freezeTraverse</a> r
--   [0,0,0,0,5,6,7,8,9,10]
--   ghci&gt; <a>copyTraverse</a> r [20..50]
--   ghci&gt; <a>freezeTraverse</a> r
--   [20,21,22,23,24,25,26,27,28,29]
--   </pre>
newtype TraverseRef m f a
TraverseRef :: f (Ref m a) -> TraverseRef m f a
[getTraverseRef] :: TraverseRef m f a -> f (Ref m a)

-- | Default <a>thawRef</a> for <a>TraverseRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>TraverseRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>TraverseRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>TraverseRef</a> for more information.
thawTraverse :: (Traversable f, Mutable m a) => f a -> m (TraverseRef m f a)

-- | Default <a>freezeRef</a> for <a>TraverseRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>TraverseRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>TraverseRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>TraverseRef</a> for more information.
freezeTraverse :: (Traversable f, Mutable m a) => TraverseRef m f a -> m (f a)

-- | Default <a>copyRef</a> for <a>TraverseRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>TraverseRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>TraverseRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>TraverseRef</a> for more information.
copyTraverse :: (Traversable f, Mutable m a) => TraverseRef m f a -> f a -> m ()

-- | A <a>Ref</a> for instances of <a>GMutable</a>, which are the
--   <a>GHC.Generics</a> combinators.
newtype GMutableRef m f a
GMutableRef :: GRef_ m f a -> GMutableRef m f a
[getGMutableRef] :: GMutableRef m f a -> GRef_ m f a

-- | Default <a>thawRef</a> for <a>GMutableRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GMutableRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GMutableRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>GMutableRef</a> for more information.
thawGMutableRef :: GMutable m f => f a -> m (GMutableRef m f a)

-- | Default <a>freezeRef</a> for <a>GMutableRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GMutableRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GMutableRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>GMutableRef</a> for more information.
freezeGMutableRef :: GMutable m f => GMutableRef m f a -> m (f a)

-- | Default <a>copyRef</a> for <a>GMutableRef</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <a>GMutableRef</a>
--   as the <a>Ref</a>. However, it can be useful if you are using a
--   <tt><a>GMutableRef</a> m f a</tt> just as a normal data type,
--   independent of the <a>Ref</a> class. See documentation for
--   <a>GMutableRef</a> for more information.
copyGMutableRef :: GMutable m f => GMutableRef m f a -> f a -> m ()
instance Data.Traversable.Traversable f => Data.Traversable.Traversable (Data.Mutable.Instances.TraverseMut f)
instance Data.Foldable.Foldable f => Data.Foldable.Foldable (Data.Mutable.Instances.TraverseMut f)
instance GHC.Base.Functor f => GHC.Base.Functor (Data.Mutable.Instances.TraverseMut f)
instance forall k (f :: k -> *) (a :: k). GHC.Generics.Generic (Data.Mutable.Instances.TraverseMut f a)
instance forall k (f :: k -> *) (a :: k). GHC.Classes.Ord (f a) => GHC.Classes.Ord (Data.Mutable.Instances.TraverseMut f a)
instance forall k (f :: k -> *) (a :: k). GHC.Classes.Eq (f a) => GHC.Classes.Eq (Data.Mutable.Instances.TraverseMut f a)
instance forall k (f :: k -> *) (a :: k). GHC.Show.Show (f a) => GHC.Show.Show (Data.Mutable.Instances.TraverseMut f a)
instance forall u (m :: * -> *) (f :: u -> *). GHC.Base.Monad m => Data.Mutable.Internal.Mutable m (Data.Vinyl.Core.Rec f '[])
instance forall a1 (m :: * -> *) (f :: a1 -> *) (a2 :: a1) (as :: [a1]). (GHC.Base.Monad m, Data.Mutable.Internal.Mutable m (f a2), Data.Mutable.Internal.Mutable m (Data.Vinyl.Core.Rec f as), Data.Mutable.Internal.Ref m (Data.Vinyl.Core.Rec f as) GHC.Types.~ Data.Vinyl.Core.Rec (Data.Mutable.Instances.RecRef m f) as) => Data.Mutable.Internal.Mutable m (Data.Vinyl.Core.Rec f (a2 : as))
instance forall k (m :: * -> *) (as :: [k]) (f :: k -> *). (GHC.Base.Monad m, Data.Vinyl.Core.RecApplicative as, Data.Vinyl.TypeLevel.NatToInt (Data.Vinyl.TypeLevel.RLength as), Data.Vinyl.Core.RPureConstrained (Data.Vinyl.ARec.IndexableField as) as, Data.Mutable.Internal.Mutable m (Data.Vinyl.Core.Rec f as), Data.Mutable.Internal.Ref m (Data.Vinyl.Core.Rec f as) GHC.Types.~ Data.Vinyl.Core.Rec (Data.Mutable.Instances.RecRef m f) as) => Data.Mutable.Internal.Mutable m (Data.Vinyl.ARec.ARec f as)
instance (Data.Traversable.Traversable f, Data.Mutable.Internal.Mutable m a) => Data.Mutable.Internal.Mutable m (Data.Mutable.Instances.TraverseMut f a)
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Int
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Integer.Type.Integer
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Natural.Natural
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m (GHC.Real.Ratio a)
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Float
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Double
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m (Data.Complex.Complex a)
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Bool
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Char
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Types.Word
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Word.Word8
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Word.Word16
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m GHC.Word.Word64
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CChar
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CSChar
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUChar
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CShort
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUShort
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CInt
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUInt
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CLong
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CULong
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CPtrdiff
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CSize
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CWchar
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CSigAtomic
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CLLong
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CULLong
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CBool
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CIntPtr
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUIntPtr
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CIntMax
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUIntMax
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CClock
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CTime
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CUSeconds
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CSUSeconds
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CFloat
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m Foreign.C.Types.CDouble
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Functor.Identity.Identity a)
instance forall k (m :: * -> *) a (b :: k). Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Functor.Const.Const a b)
instance forall k (m :: * -> *) a (b :: k). Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Vinyl.Functor.Const a b)
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Semigroup.Internal.Product a)
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Semigroup.Internal.Sum a)
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Ord.Down a)
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Semigroup.Internal.Dual a)
instance (Data.Mutable.Internal.Mutable m a, Control.Monad.Primitive.PrimMonad m) => Data.Mutable.Internal.Mutable m (GHC.Maybe.Maybe a)
instance (Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Mutable m b, Control.Monad.Primitive.PrimMonad m) => Data.Mutable.Internal.Mutable m (Data.Either.Either a b)
instance forall k (m :: * -> *) (f :: k -> *) (a :: k) (g :: k -> *). (Data.Mutable.Internal.Mutable m (f a), Data.Mutable.Internal.Mutable m (g a)) => Data.Mutable.Internal.Mutable m (Data.Functor.Product.Product f g a)
instance forall k (m :: * -> *) (f :: k -> *) (a :: k) (g :: k -> *). (Data.Mutable.Internal.Mutable m (f a), Data.Mutable.Internal.Mutable m (g a), Control.Monad.Primitive.PrimMonad m) => Data.Mutable.Internal.Mutable m (Data.Functor.Sum.Sum f g a)
instance forall k k1 (m :: * -> *) (f :: k -> *) (g :: k1 -> k) (a :: k1). Data.Mutable.Internal.Mutable m (f (g a)) => Data.Mutable.Internal.Mutable m (Data.Functor.Compose.Compose f g a)
instance (Control.Monad.Primitive.PrimMonad m, Data.Mutable.Internal.Mutable m a) => Data.Mutable.Internal.Mutable m [a]
instance Data.Mutable.Internal.Mutable m a => Data.Mutable.Internal.Mutable m (Data.Vinyl.Functor.Identity a)
instance Control.Monad.Primitive.PrimMonad m => Data.Mutable.Internal.Mutable m (Data.Vector.Vector a)
instance (Control.Monad.Primitive.PrimMonad m, Foreign.Storable.Storable a) => Data.Mutable.Internal.Mutable m (Data.Vector.Storable.Vector a)
instance (Control.Monad.Primitive.PrimMonad m, Data.Vector.Unboxed.Base.Unbox a) => Data.Mutable.Internal.Mutable m (Data.Vector.Unboxed.Base.Vector a)
instance (Control.Monad.Primitive.PrimMonad m, Data.Primitive.Types.Prim a) => Data.Mutable.Internal.Mutable m (Data.Vector.Primitive.Vector a)
instance GHC.Base.Monad m => Data.Mutable.Internal.Mutable m Data.Void.Void
instance GHC.Base.Monad m => Data.Mutable.Internal.Mutable m ()
instance (GHC.Base.Monad m, Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Mutable m b) => Data.Mutable.Internal.Mutable m (a, b)
instance (GHC.Base.Monad m, Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Mutable m b, Data.Mutable.Internal.Mutable m c) => Data.Mutable.Internal.Mutable m (a, b, c)
instance (GHC.Base.Monad m, Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Mutable m b, Data.Mutable.Internal.Mutable m c, Data.Mutable.Internal.Mutable m d) => Data.Mutable.Internal.Mutable m (a, b, c, d)


-- | Provides the <a>Mutable</a> typeclass and various helpers. See
--   <a>Mutable</a> for the main "entrypoint".
module Data.Mutable.Class

-- | An instance of <tt><a>Mutable</a> m a</tt> means that <tt>a</tt> can
--   be stored a mutable reference in monad <tt>m</tt>.
--   
--   The associated type <tt><a>Ref</a> m a</tt> links any <tt>a</tt> to
--   the type of its canonical mutable version.
--   
--   The <i>benefit</i> of this typeclass, instead of just using
--   <a>IORef</a> or <a>MutVar</a> or specific mutable versions like
--   <a>Vector</a> and <a>MVector</a>, is two-fold:
--   
--   <ul>
--   <li>Piecewise-mutable values, so you can write to only one part and
--   not others. This also allows for cheaper "writes", even if you replace
--   the whole value: you don't need to ever synthesize an entire new
--   value, you can keep each component in a separate variable until you
--   <a>freezeRef</a> it out. This can be especially useful for composite
--   data types containing large structures like <a>Vector</a>.</li>
--   <li>Generic abstractions (similar to <a>Show</a>), so you can
--   automatically derive instances while preserving piecewise-ness. For
--   example, the instance<pre>instance (Mutable m a, Mutable m b) =&gt;
--   Mutable m (a, b) </pre>If <tt>a</tt> and <tt>b</tt> are
--   piecwise-mutable, then the instance here will appropriately utilize
--   that fact.</li>
--   </ul>
--   
--   To modify the specific parts of mutable values, it can be useful to
--   use the functions in <a>Data.Mutable.MutPart</a>.
--   
--   There are facilities to automatically piecewise mutable versions for
--   user-defined instances of <a>Generic</a>.
--   
--   For example, if we have a type like:
--   
--   <pre>
--   data TwoVectors = TV
--       { tvInt    :: <a>Vector</a> Int
--       , tvDouble :: Vector Double
--       }
--     deriving Generic
--   
--   instance Mutable m TwoVectors where
--       type Ref m Foo = <a>GRef</a> m TwoVectors
--   </pre>
--   
--   Then now we get:
--   
--   <pre>
--   <a>thawRef</a>   :: TwoVectors -&gt; m (<a>GRef</a> m TwoVectors)
--   <a>freezeRef</a> :: <a>GRef</a> m TwoVectors -&gt; m TwoVectors
--   </pre>
--   
--   And <tt><a>GRef</a> m TwoVectors</tt> is now a piecewise-mutable
--   reference storing each part in a way that can be modified separately
--   (for example, with tools from <a>Data.Mutable.MutPart</a>). It does
--   this by internally allocating two <a>MVector</a>s. If the two vectors
--   are large, this can be much more efficient to modify (if you are
--   modifying <i>several times</i>) than by just doing alterations on
--   <tt>TwoVector</tt>s. It is also much better for large vectors if you
--   plan on modifying only a single item in the vector.
--   
--   If you are using the "higher-kinded" data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>,
--   then we can also do:
--   
--   <pre>
--   data TwoVectors f = TV
--        { tvInt    :: <a>HKD</a> f (<a>Vector</a> Int)
--        , tvDouble :: HKD f (Vector Double)
--        }
--     deriving Generic
--   
--   instance Mutable (TwoVectors <a>Identity</a>) where
--       type Ref (TwoVectors <a>Identity</a>) = TwoVectors (<a>RefFor</a> m)
--   </pre>
--   
--   And now your mutable ref is literally going to be a product of the
--   components
--   
--   <pre>
--   ghci&gt; tvr@(TV is ds) &lt;- thawRef (TV xs ys)
--   ghci&gt; :t tvr
--   TV (<a>RefFor</a> IO)
--   ghci&gt; :t is
--   <a>MVector</a> RealWorld Int
--   ghci&gt; :t ds
--   <a>MVector</a> RealWorld Double
--   </pre>
--   
--   So <a>thawRef</a> will actually just get you the same record type but
--   with the mutable versions of each field. If you modify the mutable
--   fields, and then later <a>freezeRef</a> the whole thing, the resulting
--   frozen value will incorporate all of the changes to the individual
--   fields.
class Monad m => Mutable m a where {
    
    -- | Links the type <tt>a</tt> to the type of its canonical mutable
    --   version.
    --   
    --   For example, for <a>Vector</a>, the mutable version is <a>MVector</a>,
    --   so we have
    --   
    --   <pre>
    --   type Ref m (<a>Vector</a> a) = <a>MVector</a> (<a>PrimState</a> m) a
    --   </pre>
    --   
    --   This means that using <a>thawRef</a> on a <a>Vector</a> will give you
    --   an <a>MVector</a>, using <a>freezeRef</a> on a <a>Vector</a> will give
    --   you a <a>Vector</a>, etc.
    --   
    --   <pre>
    --   <a>thawRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> a
    --       -&gt; m (<a>Vector</a> s a)
    --   
    --   <a>freezeRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> s a
    --       -&gt; m (<a>Vector</a> a)
    --   
    --   <a>copyRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> s a
    --       -&gt; <a>Vector</a> a
    --       -&gt; m ()
    --   </pre>
    --   
    --   This associated type must be unique for <tt>a</tt>, so no two types
    --   <tt>a</tt> can have the same <tt><a>Ref</a> m a</tt>. This makes type
    --   inference a lot more useful: if you use <a>freezeRef</a> on an
    --   <a>MVector</a>, for instance, the return type will be inferred to be
    --   <a>Vector</a>.
    --   
    --   The <i>default</i> instance is just a plain old <a>MutVar</a>
    --   containing the type. This is a valid instance, but it treats the
    --   entire type "wholesale" --- it is basically using it as a non-mutable
    --   type. You won't get any of the performance benefits of piecewise
    --   mutation from it, but it is useful as a base case for non-composite
    --   types like <a>Int</a>.
    --   
    --   There are some built-in alternative options for user-defined ADTs with
    --   <a>Generic</a> instances:
    --   
    --   <pre>
    --   -- Works for all <a>Generic</a> instances, preserves piecewise mutation
    --   -- for products
    --   type Ref m a = <a>GRef</a> m a
    --   
    --   -- Works for "higher-kinded" data types, a la
    --   -- <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>
    --   type Ref m (z <a>Identity</a>) = z (<a>RefFor</a> m)
    --   </pre>
    --   
    --   If you just set up a blank instance, the implementations of
    --   <a>thawRef</a>, <a>freezeRef</a>, and <a>copyRef</a> will be inferred
    --   using <a>DefaultMutable</a>.
    --   
    --   <pre>
    --   data MyType
    --   
    --   -- The default setup is OK
    --   instance Mutable m MyType
    --   
    --   -- This is equivalent to the above
    --   instance Mutable m MyType
    --       type Ref m MyType = <a>MutVar</a> (<a>PrimState</a> m) MyType
    --   
    --   -- any <a>Generic</a> instance
    --   data Foo = Foo { fInt :: Int, fDouble :: Double }
    --     deriving Generic
    --   
    --   instance Mutable m Foo where
    --       type Ref m Foo = <a>GRef</a> m Foo
    --   
    --   -- HKD pattern types
    --   data Bar f = Bar { bInt :: f Int, bDouble :: f Double }
    --     deriving Generic
    --   
    --   instance Mutable (Bar Identity) where
    --       type Ref (Bar Identity) = Bar (<a>RefFor</a> m)
    --   </pre>
    type family Ref m a = (v :: Type) | v -> a;
    type Ref m a = MutVar (PrimState m) a;
}

-- | <a>Thaw</a> a pure/persistent value into its mutable version, which
--   can be manipulated using <a>modifyRef</a> or other methods specific
--   for that type (like <a>read</a>).
--   
--   Returns the <a>Ref</a> instance, so, for example, for <a>Vector</a>:
--   
--   <pre>
--   <a>thawRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> a
--       -&gt; m (<a>Vector</a> s a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "new
--   var" function, like <a>newIORef</a> / <a>newSTRef</a> /
--   <a>newMutVar</a> etc.
thawRef :: Mutable m a => a -> m (Ref m a)

-- | <a>Freeze</a> a mutable value into its pure/persistent version.
--   
--   Takes a <a>Ref</a> instance, but type inference will be able to infer
--   the pure value's type because <a>Ref</a> is injective.
--   
--   For example, for <a>Vector</a>:
--   
--   <pre>
--   <a>freezeRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; m (<a>Vector</a> a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "read
--   var" function, like <a>readIORef</a> / <a>readSTRef</a> /
--   <a>readMutVar</a> etc.
freezeRef :: Mutable m a => Ref m a -> m a

-- | Overwrite a mutable value by provivding a pure/persistent value.
--   <a>copyRef</a>
--   
--   Returns the <a>Ref</a> and the value, so, for example, for
--   <a>Vector</a>:
--   
--   <pre>
--   <a>copyRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; <a>Vector</a> a
--       -&gt; m ()
--   </pre>
--   
--   Note that if <tt>a</tt> is a composite type (with an appropriate
--   composite reference), this will be done "piecewise": it'll write to
--   each mutable component separately.
--   
--   For non-composite (like <a>Int</a>), this is often called the "write
--   var" function, like <a>writeIORef</a> / <a>writeSTRef</a> /
--   <a>writeMutVar</a> etc.
copyRef :: Mutable m a => Ref m a -> a -> m ()

-- | <a>Thaw</a> a pure/persistent value into its mutable version, which
--   can be manipulated using <a>modifyRef</a> or other methods specific
--   for that type (like <a>read</a>).
--   
--   Returns the <a>Ref</a> instance, so, for example, for <a>Vector</a>:
--   
--   <pre>
--   <a>thawRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> a
--       -&gt; m (<a>Vector</a> s a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "new
--   var" function, like <a>newIORef</a> / <a>newSTRef</a> /
--   <a>newMutVar</a> etc.
thawRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => a -> m (Ref m a)

-- | <a>Freeze</a> a mutable value into its pure/persistent version.
--   
--   Takes a <a>Ref</a> instance, but type inference will be able to infer
--   the pure value's type because <a>Ref</a> is injective.
--   
--   For example, for <a>Vector</a>:
--   
--   <pre>
--   <a>freezeRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; m (<a>Vector</a> a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "read
--   var" function, like <a>readIORef</a> / <a>readSTRef</a> /
--   <a>readMutVar</a> etc.
freezeRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => Ref m a -> m a

-- | Overwrite a mutable value by provivding a pure/persistent value.
--   <a>copyRef</a>
--   
--   Returns the <a>Ref</a> and the value, so, for example, for
--   <a>Vector</a>:
--   
--   <pre>
--   <a>copyRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; <a>Vector</a> a
--       -&gt; m ()
--   </pre>
--   
--   Note that if <tt>a</tt> is a composite type (with an appropriate
--   composite reference), this will be done "piecewise": it'll write to
--   each mutable component separately.
--   
--   For non-composite (like <a>Int</a>), this is often called the "write
--   var" function, like <a>writeIORef</a> / <a>writeSTRef</a> /
--   <a>writeMutVar</a> etc.
copyRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => Ref m a -> a -> m ()

-- | Apply a pure function on an immutable value onto a value stored in a
--   mutable reference.
modifyRef :: Mutable m a => Ref m a -> (a -> a) -> m ()

-- | <a>modifyRef</a>, but forces the result before storing it back in the
--   reference.
modifyRef' :: Mutable m a => Ref m a -> (a -> a) -> m ()

-- | Apply a pure function on an immutable value onto a value stored in a
--   mutable reference, returning a result value from that function.
updateRef :: Mutable m a => Ref m a -> (a -> (a, b)) -> m b

-- | <a>updateRef</a>, but forces the updated value before storing it back
--   in the reference.
updateRef' :: Mutable m a => Ref m a -> (a -> (a, b)) -> m b

-- | Newtype wrapper that can provide any type with a <a>Mutable</a>
--   instance, giving it a "non-piecewise" instance. Can be useful for
--   avoiding orphan instances yet still utilizing auto-deriving features,
--   or for overwriting the <a>Mutable</a> instance of other instances.
--   
--   For example, let's say you want to auto-derive an instance for your
--   data type:
--   
--   <pre>
--   data MyType = MT Int Double OtherType
--     deriving Generic
--   </pre>
--   
--   This is possible if all of <tt>MyType</tt>s fields have <a>Mutable</a>
--   instances. However, let's say <tt>OtherType</tt> comes from an
--   external library that you don't have control over, and so you cannot
--   give it a <a>Mutable</a> instance without incurring an orphan
--   instance.
--   
--   One solution is to wrap it in <a>MutRef</a>:
--   
--   <pre>
--   data MyType = MT Int Double (<a>MutRef</a> OtherType)
--     deriving Generic
--   </pre>
--   
--   This can then be auto-derived:
--   
--   <pre>
--   instance Mutable m MyType where
--       type Ref m MyType = GRef m MyType
--   </pre>
--   
--   It can also be used to <i>override</i> a <a>Mutable</a> instance. For
--   example, even if the <a>Mutable</a> instance of <tt>SomeType</tt> is
--   piecewise-mutable, the <a>Mutable</a> instance of <tt><a>MutRef</a>
--   SomeType</tt> will be not be piecewise.
newtype MutRef a
MutRef :: a -> MutRef a
[getMutRef] :: MutRef a -> a

-- | A handy newtype wrapper that allows you to partially apply <a>Ref</a>.
--   <tt><a>RefFor</a> m a</tt> is the same as <tt><a>Ref</a> m a</tt>, but
--   can be partially applied.
--   
--   If used with <a>HKD</a>, you can treat this syntactically identically
--   as a <tt><a>Ref</a> m a</tt>.
newtype RefFor m a
RefFor :: Ref m a -> RefFor m a
[getRefFor] :: RefFor m a -> Ref m a

-- | The default implementations of <a>thawRef</a>, <a>freezeRef</a>, and
--   <a>copyRef</a> dispatched for different choices of <a>Ref</a>.
--   
--   Basically, by specifying <a>Ref</a>, you get the rest of the instance
--   for free.
--   
--   <pre>
--   -- default, if you don't specify <a>Ref</a>
--   instance Mutable m MyType
--   
--   -- the above is the same as:
--   instance Mutable m MyType
--       type Ref m MyType = MutVar (PrimState m) MyType
--   
--   -- or if we have an instance of <a>Generic</a>:
--   instance Mutable m MyType
--       type Ref m MyType = GRef m MyType
--   
--   -- or, using the higher-kinded data pattern, like
--   -- <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>
--   instance Mutable m (MyTypeF Identity)
--       type Ref m (MyTypeF Identity) = MyTypeF (RefFor m)
--   </pre>
class DefaultMutable m a r
defaultThawRef :: DefaultMutable m a r => a -> m r
defaultFreezeRef :: DefaultMutable m a r => r -> m a
defaultCopyRef :: DefaultMutable m a r => r -> a -> m ()

-- | If you can provice a natural transformation from <tt>m</tt> to
--   <tt>n</tt>, you should be able to use a value as if it had
--   <tt><a>Mutable</a> n a</tt> if you have <tt><a>Mutable</a> m a</tt>.
reMutable :: forall m n a r. (Mutable m a, Monad n) => (forall x. m x -> n x) -> (Mutable n a => r) -> r

-- | If you can provice a natural transformation from <tt>m</tt> to
--   <tt>n</tt>, then <tt><a>Mutable</a> m a</tt> should also imply
--   <tt><a>Mutable</a> n a</tt>.
reMutableConstraint :: forall m n a. (Mutable m a, Monad n) => (forall x. m x -> n x) -> Mutable m a :- Mutable n a
instance (GHC.Base.Monad n, Data.Mutable.Internal.Mutable m a, Data.Reflection.Reifies s (Data.Mutable.Class.ReMutableTrans m n)) => Data.Mutable.Internal.Mutable n (Data.Mutable.Class.ReMutable s m a)


-- | Tools for working with individual components of piecewise-mutable
--   values.
module Data.Mutable.MutPart

-- | A <tt><a>MutPart</a> m s a</tt> is a way to "zoom into" an <tt>a</tt>,
--   as a part of a mutable reference on <tt>s</tt>. This allows you to
--   only modify a single <tt>a</tt> part of the <tt>s</tt>, without
--   touching the rest.
--   
--   An example that is commonly found in the ecosystem is something like
--   (flipped) <tt>write :: Int -&gt; <a>MVector</a> s a -&gt; a -&gt; m
--   ()</tt> from <a>Data.Vector.Mutable</a> --- <tt>write 3 ::
--   <a>MVector</a> s a -&gt; a -&gt; m ()</tt>, for instance, lets you
--   modify a specific part of the vector without touching the rest.
--   
--   You would <i>use</i> a <a>MutPart</a> using <a>freezePart</a>,
--   <a>copyPart</a>, <a>modifyPart</a>, etc.
--   
--   For non-composite types, there won't really be any meaningful values.
--   However, we have them for many composite types. For example, for
--   tuples:
--   
--   <pre>
--   <a>mutFst</a> :: <a>MutPart</a> m (a, b) a
--   <a>mutSnd</a> :: MutPart m (a, b) b
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (2, 4)
--   ghci&gt; <a>copyPart</a> mutFst r 100
--   ghci&gt; <a>freezeRef</a> r
--   (100, 4)
--   </pre>
--   
--   If you are using <a>GRef</a> as an automatically-defined mutable
--   reference, then the easiest way to create these for your mutable types
--   are with <a>fieldMut</a> and <a>posMut</a>.
--   
--   If you are using the "Higher-kinded data" pattern, then there's an
--   easy way to generate a <a>MutPart</a> for every single field, if you
--   have a product type --- see <a>hkdMutParts</a> for more information.
newtype MutPart m s a
MutPart :: (Ref m s -> Ref m a) -> MutPart m s a
[getMutPart] :: MutPart m s a -> Ref m s -> Ref m a

-- | Using a <a>MutPart</a>, perform a function on a <tt><a>Ref</a> m
--   s</tt> as if you had a <tt><a>Ref</a> m a</tt>.
withMutPart :: MutPart m s a -> Ref m s -> (Ref m a -> m b) -> m b

-- | With a <a>MutPart</a>, read out a specific part of a <a>Ref</a>.
freezePart :: Mutable m a => MutPart m s a -> Ref m s -> m a

-- | With a <a>MutPart</a>, overwrite into a specific part of a <a>Ref</a>.
copyPart :: Mutable m a => MutPart m s a -> Ref m s -> a -> m ()

-- | With a <a>MutPart</a>, modify a specific part of a <a>Ref</a> with a
--   pure function.
modifyPart :: Mutable m a => MutPart m s a -> Ref m s -> (a -> a) -> m ()

-- | <a>modifyPart</a>, but forces the result before storing it back in the
--   reference.
modifyPart' :: Mutable m a => MutPart m s a -> Ref m s -> (a -> a) -> m ()

-- | <a>updateRef</a>, under a <a>MutPart</a> to only modify a specific
--   part of a <a>Ref</a>.
updatePart :: Mutable m a => MutPart m s a -> Ref m s -> (a -> (a, b)) -> m b

-- | <a>updatePart</a>, but forces the result before storing it back in the
--   reference.
updatePart' :: Mutable m a => MutPart m s a -> Ref m s -> (a -> (a, b)) -> m b

-- | Compose two <a>MutPart</a>s one after the other.
--   
--   Note this is also available (albeit flipped in arguments) through the
--   <a>Category</a> instance.
compMP :: MutPart m a b -> MutPart m b c -> MutPart m a c
infixr 9 `compMP`

-- | The identity <a>MutPart</a>: simply focus into the same type itself.
--   
--   Note this is also available through the <a>Category</a> instance.
idMP :: MutPart m a a

-- | <a>MutPart</a> into the first field of a tuple reference.
mutFst :: MutPart m (a, b) a

-- | <a>MutPart</a> into the second field of a tuple reference.
mutSnd :: MutPart m (a, b) b

-- | Create a <a>MutPart</a> for a field name. Should work for any type
--   with one constructor whose mutable reference is <a>GRef</a>. See
--   <a>fieldMut</a> for usage directions.
class (Mutable m s, Mutable m a) => FieldMut (fld :: Symbol) m s a | fld s -> a

-- | Create a <a>MutPart</a> for a field name. Should work for any type
--   with one constructor whose mutable reference is <a>GRef</a>.
--   
--   Is meant to be used with OverloadedLabels:
--   
--   <pre>
--   data Foo = Foo { fInt :: Int, fDouble :: Double }
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> #fInt) r
--   3
--   ghci&gt; <a>copyPart</a> (fieldMut #fDouble) 1.23
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 1.23
--   </pre>
--   
--   However, you can use it without OverloadedLabels by using <a>Label</a>
--   with TypeApplications:
--   
--   <pre>
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> (<a>Label</a> @"fInt")) r
--   3
--   </pre>
--   
--   This and <a>posMut</a> are the main ways to generate a <a>MutPart</a>
--   for a type whose mutable reference is <a>GRef</a>.
fieldMut :: FieldMut fld m s a => Label fld -> MutPart m s a

-- | Proxy for label type
data Label (a :: Symbol)
Label :: Label (a :: Symbol)

-- | Create a <a>MutPart</a> for a position in a sum type. Should work for
--   any type with one constructor whose mutable reference is <a>GRef</a>.
--   See <a>posMut</a> for usage directions.
class (Mutable m s, Mutable m a) => PosMut (i :: Nat) m s a | i s -> a

-- | Create a <a>MutPart</a> for a position in a sum type. Should work for
--   any type with one constructor whose mutable reference is <a>GRef</a>.
--   
--   Meant to be used with TypeApplications:
--   
--   <pre>
--   data Foo = Foo Int Double
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezePart</a> (<a>posMut</a> <tt>1) r
--   3
--   ghci&gt; <a>copyPart</a> (posMut </tt>2) 1.23
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 1.23
--   </pre>
--   
--   This and <a>fieldMut</a> are the main ways to generate a
--   <a>MutPart</a> for a type whose mutable reference is <a>GRef</a>.
posMut :: PosMut i m s a => MutPart m s a

-- | If you are using the "higher-kinded data" pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>, and
--   you have the appropriate instance for <a>Ref</a>, then you can use
--   this to generate a <a>MutPart</a> for every field, if you have a type
--   with only one constructor.
--   
--   <pre>
--   data MyTypeF f = MT
--        { fInt    :: f Int
--        , fDouble :: f Double
--        }
--     deriving Generic
--   
--   instance Mutable (MyTypeF <a>Identity</a>) where
--       type Ref (MyTypeF <a>Identity</a>) = MyTypeF (<a>RefFor</a> m)
--   
--   mx :: MutPart (MyTypeF Identity) (<a>Vector</a> Int)
--   my :: MutPart (MyTypeF Identity) (V.Vector Double)
--   MT mx my = hkdMutParts @MyTypeF
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- thawRef (MT 3 4.5)
--   ghci&gt; <a>freezePart</a> mx r
--   3
--   ghci&gt; <a>copyPart</a> (fDouble (hkdMutParts @MyTypeF)) r 12.3
--   ghci&gt; <a>freezeRef</a> r
--   MT 3 12.3
--   </pre>
hkdMutParts :: forall z m. (Generic (z (RefFor m)), Generic (z (MutPart m (z Identity))), HKDMutParts m z (Rep (z (RefFor m))) (Rep (z (MutPart m (z Identity))))) => z (MutPart m (z Identity))

-- | Typeclass used to implement <a>hkdMutParts</a>. See documentation of
--   <a>hkdMutParts</a> for more information.
class (Mutable m (z Identity), Ref m (z Identity) ~ z (RefFor m)) => HKDMutParts m z i o

-- | A <a>MutPart</a> for a field in a vinyl <a>Rec</a>, automatically
--   generated as the first field with a matching type. This is polymorphic
--   to work over both <a>Rec</a> and <a>ARec</a>.
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> $ [1,2,3] <a>:&amp;</a> [True, False] :&amp; <a>RNil</a>
--   ghci&gt; modifyPart (mutRec @Bool) r reverse
--   ghci&gt; freezeRef r
--   [1,2,3] :&amp; [False, True] :&amp; RNil
--   </pre>
mutRec :: forall a as f rec m. (Ref m (rec f as) ~ rec (RecRef m f) as, RecElem rec a a as as (RIndex a as), RecElemFCtx rec (RecRef m f)) => MutPart m (rec f as) (f a)

-- | A <a>MutPart</a> to get into a <a>CoerceRef</a>.
coerceRef :: Ref m s ~ CoerceRef m s a => MutPart m s a
instance (Data.Mutable.Internal.Mutable m s, Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Ref m s GHC.Types.~ Data.Mutable.Internal.GRef m s, gref GHC.Types.~ Data.Mutable.MutPart.Fst (Data.Mutable.MutPart.Traverse (Data.Mutable.Internal.GRef_ m (Data.Generics.Product.Internal.Positions.CRep s)) 1), GHC.Types.Coercible (Data.Mutable.Internal.GRef_ m (GHC.Generics.Rep s) ()) (gref ()), Data.Generics.Product.Internal.GLens.GLens' (Data.Mutable.MutPart.HasTotalPositionPSym i) gref (Data.Mutable.Internal.Ref m a), Data.Generics.Product.Positions.HasPosition' i s a) => Data.Mutable.MutPart.PosMut i m s a
instance (Data.Mutable.Internal.Mutable m s, Data.Mutable.Internal.Mutable m a, Data.Mutable.Internal.Ref m s GHC.Types.~ Data.Mutable.Internal.GRef m s, Data.Generics.Product.Internal.GLens.GLens' (Data.Mutable.MutPart.HasTotalFieldPSym fld) (Data.Mutable.Internal.GRef_ m (GHC.Generics.Rep s)) (Data.Mutable.Internal.Ref m a), Data.Generics.Product.Fields.HasField' fld s a) => Data.Mutable.MutPart.FieldMut fld m s a
instance (Data.Mutable.Internal.Mutable m (z Data.Vinyl.Functor.Identity), Data.Mutable.Internal.Ref m (z Data.Vinyl.Functor.Identity) GHC.Types.~ z (Data.Mutable.Internal.RefFor m)) => Data.Mutable.MutPart.HKDMutParts m z (GHC.Generics.K1 i (Data.Mutable.Internal.RefFor m c)) (GHC.Generics.K1 i (Data.Mutable.MutPart.MutPart m (z Data.Vinyl.Functor.Identity) c))
instance (Data.Mutable.Internal.Mutable m (z Data.Vinyl.Functor.Identity), Data.Mutable.Internal.Ref m (z Data.Vinyl.Functor.Identity) GHC.Types.~ z (Data.Mutable.Internal.RefFor m)) => Data.Mutable.MutPart.HKDMutParts m z GHC.Generics.U1 GHC.Generics.U1
instance (Data.Mutable.Internal.Mutable m (z Data.Vinyl.Functor.Identity), Data.Mutable.Internal.Ref m (z Data.Vinyl.Functor.Identity) GHC.Types.~ z (Data.Mutable.Internal.RefFor m), (TypeError ...)) => Data.Mutable.MutPart.HKDMutParts m z GHC.Generics.V1 GHC.Generics.V1
instance forall k (m :: * -> *) (z :: (* -> *) -> *) (i :: k -> *) (o :: k -> *) a (b :: GHC.Generics.Meta). Data.Mutable.MutPart.HKDMutParts m z i o => Data.Mutable.MutPart.HKDMutParts m z (GHC.Generics.M1 a b i) (GHC.Generics.M1 a b o)
instance forall k (m :: * -> *) (z :: (* -> *) -> *) (i :: k -> *) (o :: k -> *) (i' :: k -> *) (o' :: k -> *). (Data.Mutable.MutPart.HKDMutParts m z i o, Data.Mutable.MutPart.HKDMutParts m z i' o') => Data.Mutable.MutPart.HKDMutParts m z (i GHC.Generics.:*: i') (o GHC.Generics.:*: o')
instance forall k (m :: * -> *) (z :: (* -> *) -> *) (i :: k -> *) (i' :: k -> *) (o :: k -> *). (Data.Mutable.Internal.Mutable m (z Data.Vinyl.Functor.Identity), Data.Mutable.Internal.Ref m (z Data.Vinyl.Functor.Identity) GHC.Types.~ z (Data.Mutable.Internal.RefFor m), (TypeError ...)) => Data.Mutable.MutPart.HKDMutParts m z (i GHC.Generics.:+: i') o
instance Control.Category.Category (Data.Mutable.MutPart.MutPart m)
instance Data.Vinyl.XRec.IsoHKD (Data.Mutable.MutPart.MutPart m s) a


-- | Main entrypoint of the package. Abstract over different types for
--   piecewise-mutable references of values.
module Data.Mutable

-- | An instance of <tt><a>Mutable</a> m a</tt> means that <tt>a</tt> can
--   be stored a mutable reference in monad <tt>m</tt>.
--   
--   The associated type <tt><a>Ref</a> m a</tt> links any <tt>a</tt> to
--   the type of its canonical mutable version.
--   
--   The <i>benefit</i> of this typeclass, instead of just using
--   <a>IORef</a> or <a>MutVar</a> or specific mutable versions like
--   <a>Vector</a> and <a>MVector</a>, is two-fold:
--   
--   <ul>
--   <li>Piecewise-mutable values, so you can write to only one part and
--   not others. This also allows for cheaper "writes", even if you replace
--   the whole value: you don't need to ever synthesize an entire new
--   value, you can keep each component in a separate variable until you
--   <a>freezeRef</a> it out. This can be especially useful for composite
--   data types containing large structures like <a>Vector</a>.</li>
--   <li>Generic abstractions (similar to <a>Show</a>), so you can
--   automatically derive instances while preserving piecewise-ness. For
--   example, the instance<pre>instance (Mutable m a, Mutable m b) =&gt;
--   Mutable m (a, b) </pre>If <tt>a</tt> and <tt>b</tt> are
--   piecwise-mutable, then the instance here will appropriately utilize
--   that fact.</li>
--   </ul>
--   
--   To modify the specific parts of mutable values, it can be useful to
--   use the functions in <a>Data.Mutable.MutPart</a>.
--   
--   There are facilities to automatically piecewise mutable versions for
--   user-defined instances of <a>Generic</a>.
--   
--   For example, if we have a type like:
--   
--   <pre>
--   data TwoVectors = TV
--       { tvInt    :: <a>Vector</a> Int
--       , tvDouble :: Vector Double
--       }
--     deriving Generic
--   
--   instance Mutable m TwoVectors where
--       type Ref m Foo = <a>GRef</a> m TwoVectors
--   </pre>
--   
--   Then now we get:
--   
--   <pre>
--   <a>thawRef</a>   :: TwoVectors -&gt; m (<a>GRef</a> m TwoVectors)
--   <a>freezeRef</a> :: <a>GRef</a> m TwoVectors -&gt; m TwoVectors
--   </pre>
--   
--   And <tt><a>GRef</a> m TwoVectors</tt> is now a piecewise-mutable
--   reference storing each part in a way that can be modified separately
--   (for example, with tools from <a>Data.Mutable.MutPart</a>). It does
--   this by internally allocating two <a>MVector</a>s. If the two vectors
--   are large, this can be much more efficient to modify (if you are
--   modifying <i>several times</i>) than by just doing alterations on
--   <tt>TwoVector</tt>s. It is also much better for large vectors if you
--   plan on modifying only a single item in the vector.
--   
--   If you are using the "higher-kinded" data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>,
--   then we can also do:
--   
--   <pre>
--   data TwoVectors f = TV
--        { tvInt    :: <a>HKD</a> f (<a>Vector</a> Int)
--        , tvDouble :: HKD f (Vector Double)
--        }
--     deriving Generic
--   
--   instance Mutable (TwoVectors <a>Identity</a>) where
--       type Ref (TwoVectors <a>Identity</a>) = TwoVectors (<a>RefFor</a> m)
--   </pre>
--   
--   And now your mutable ref is literally going to be a product of the
--   components
--   
--   <pre>
--   ghci&gt; tvr@(TV is ds) &lt;- thawRef (TV xs ys)
--   ghci&gt; :t tvr
--   TV (<a>RefFor</a> IO)
--   ghci&gt; :t is
--   <a>MVector</a> RealWorld Int
--   ghci&gt; :t ds
--   <a>MVector</a> RealWorld Double
--   </pre>
--   
--   So <a>thawRef</a> will actually just get you the same record type but
--   with the mutable versions of each field. If you modify the mutable
--   fields, and then later <a>freezeRef</a> the whole thing, the resulting
--   frozen value will incorporate all of the changes to the individual
--   fields.
class Monad m => Mutable m a where {
    
    -- | Links the type <tt>a</tt> to the type of its canonical mutable
    --   version.
    --   
    --   For example, for <a>Vector</a>, the mutable version is <a>MVector</a>,
    --   so we have
    --   
    --   <pre>
    --   type Ref m (<a>Vector</a> a) = <a>MVector</a> (<a>PrimState</a> m) a
    --   </pre>
    --   
    --   This means that using <a>thawRef</a> on a <a>Vector</a> will give you
    --   an <a>MVector</a>, using <a>freezeRef</a> on a <a>Vector</a> will give
    --   you a <a>Vector</a>, etc.
    --   
    --   <pre>
    --   <a>thawRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> a
    --       -&gt; m (<a>Vector</a> s a)
    --   
    --   <a>freezeRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> s a
    --       -&gt; m (<a>Vector</a> a)
    --   
    --   <a>copyRef</a>
    --       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
    --       =&gt; <a>Vector</a> s a
    --       -&gt; <a>Vector</a> a
    --       -&gt; m ()
    --   </pre>
    --   
    --   This associated type must be unique for <tt>a</tt>, so no two types
    --   <tt>a</tt> can have the same <tt><a>Ref</a> m a</tt>. This makes type
    --   inference a lot more useful: if you use <a>freezeRef</a> on an
    --   <a>MVector</a>, for instance, the return type will be inferred to be
    --   <a>Vector</a>.
    --   
    --   The <i>default</i> instance is just a plain old <a>MutVar</a>
    --   containing the type. This is a valid instance, but it treats the
    --   entire type "wholesale" --- it is basically using it as a non-mutable
    --   type. You won't get any of the performance benefits of piecewise
    --   mutation from it, but it is useful as a base case for non-composite
    --   types like <a>Int</a>.
    --   
    --   There are some built-in alternative options for user-defined ADTs with
    --   <a>Generic</a> instances:
    --   
    --   <pre>
    --   -- Works for all <a>Generic</a> instances, preserves piecewise mutation
    --   -- for products
    --   type Ref m a = <a>GRef</a> m a
    --   
    --   -- Works for "higher-kinded" data types, a la
    --   -- <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>
    --   type Ref m (z <a>Identity</a>) = z (<a>RefFor</a> m)
    --   </pre>
    --   
    --   If you just set up a blank instance, the implementations of
    --   <a>thawRef</a>, <a>freezeRef</a>, and <a>copyRef</a> will be inferred
    --   using <a>DefaultMutable</a>.
    --   
    --   <pre>
    --   data MyType
    --   
    --   -- The default setup is OK
    --   instance Mutable m MyType
    --   
    --   -- This is equivalent to the above
    --   instance Mutable m MyType
    --       type Ref m MyType = <a>MutVar</a> (<a>PrimState</a> m) MyType
    --   
    --   -- any <a>Generic</a> instance
    --   data Foo = Foo { fInt :: Int, fDouble :: Double }
    --     deriving Generic
    --   
    --   instance Mutable m Foo where
    --       type Ref m Foo = <a>GRef</a> m Foo
    --   
    --   -- HKD pattern types
    --   data Bar f = Bar { bInt :: f Int, bDouble :: f Double }
    --     deriving Generic
    --   
    --   instance Mutable (Bar Identity) where
    --       type Ref (Bar Identity) = Bar (<a>RefFor</a> m)
    --   </pre>
    type family Ref m a = (v :: Type) | v -> a;
    type Ref m a = MutVar (PrimState m) a;
}

-- | <a>Thaw</a> a pure/persistent value into its mutable version, which
--   can be manipulated using <a>modifyRef</a> or other methods specific
--   for that type (like <a>read</a>).
--   
--   Returns the <a>Ref</a> instance, so, for example, for <a>Vector</a>:
--   
--   <pre>
--   <a>thawRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> a
--       -&gt; m (<a>Vector</a> s a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "new
--   var" function, like <a>newIORef</a> / <a>newSTRef</a> /
--   <a>newMutVar</a> etc.
thawRef :: Mutable m a => a -> m (Ref m a)

-- | <a>Freeze</a> a mutable value into its pure/persistent version.
--   
--   Takes a <a>Ref</a> instance, but type inference will be able to infer
--   the pure value's type because <a>Ref</a> is injective.
--   
--   For example, for <a>Vector</a>:
--   
--   <pre>
--   <a>freezeRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; m (<a>Vector</a> a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "read
--   var" function, like <a>readIORef</a> / <a>readSTRef</a> /
--   <a>readMutVar</a> etc.
freezeRef :: Mutable m a => Ref m a -> m a

-- | Overwrite a mutable value by provivding a pure/persistent value.
--   <a>copyRef</a>
--   
--   Returns the <a>Ref</a> and the value, so, for example, for
--   <a>Vector</a>:
--   
--   <pre>
--   <a>copyRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; <a>Vector</a> a
--       -&gt; m ()
--   </pre>
--   
--   Note that if <tt>a</tt> is a composite type (with an appropriate
--   composite reference), this will be done "piecewise": it'll write to
--   each mutable component separately.
--   
--   For non-composite (like <a>Int</a>), this is often called the "write
--   var" function, like <a>writeIORef</a> / <a>writeSTRef</a> /
--   <a>writeMutVar</a> etc.
copyRef :: Mutable m a => Ref m a -> a -> m ()

-- | <a>Thaw</a> a pure/persistent value into its mutable version, which
--   can be manipulated using <a>modifyRef</a> or other methods specific
--   for that type (like <a>read</a>).
--   
--   Returns the <a>Ref</a> instance, so, for example, for <a>Vector</a>:
--   
--   <pre>
--   <a>thawRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> a
--       -&gt; m (<a>Vector</a> s a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "new
--   var" function, like <a>newIORef</a> / <a>newSTRef</a> /
--   <a>newMutVar</a> etc.
thawRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => a -> m (Ref m a)

-- | <a>Freeze</a> a mutable value into its pure/persistent version.
--   
--   Takes a <a>Ref</a> instance, but type inference will be able to infer
--   the pure value's type because <a>Ref</a> is injective.
--   
--   For example, for <a>Vector</a>:
--   
--   <pre>
--   <a>freezeRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; m (<a>Vector</a> a)
--   </pre>
--   
--   For non-composite (like <a>Int</a>), this is often called the "read
--   var" function, like <a>readIORef</a> / <a>readSTRef</a> /
--   <a>readMutVar</a> etc.
freezeRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => Ref m a -> m a

-- | Overwrite a mutable value by provivding a pure/persistent value.
--   <a>copyRef</a>
--   
--   Returns the <a>Ref</a> and the value, so, for example, for
--   <a>Vector</a>:
--   
--   <pre>
--   <a>copyRef</a>
--       :: (<a>PrimMonad</a> m, s ~ <a>PrimState</a> m)
--       =&gt; <a>Vector</a> s a
--       -&gt; <a>Vector</a> a
--       -&gt; m ()
--   </pre>
--   
--   Note that if <tt>a</tt> is a composite type (with an appropriate
--   composite reference), this will be done "piecewise": it'll write to
--   each mutable component separately.
--   
--   For non-composite (like <a>Int</a>), this is often called the "write
--   var" function, like <a>writeIORef</a> / <a>writeSTRef</a> /
--   <a>writeMutVar</a> etc.
copyRef :: (Mutable m a, DefaultMutable m a (Ref m a)) => Ref m a -> a -> m ()

-- | Apply a pure function on an immutable value onto a value stored in a
--   mutable reference.
modifyRef :: Mutable m a => Ref m a -> (a -> a) -> m ()

-- | <a>modifyRef</a>, but forces the result before storing it back in the
--   reference.
modifyRef' :: Mutable m a => Ref m a -> (a -> a) -> m ()

-- | Apply a pure function on an immutable value onto a value stored in a
--   mutable reference, returning a result value from that function.
updateRef :: Mutable m a => Ref m a -> (a -> (a, b)) -> m b

-- | <a>updateRef</a>, but forces the updated value before storing it back
--   in the reference.
updateRef' :: Mutable m a => Ref m a -> (a -> (a, b)) -> m b

-- | Newtype wrapper that can provide any type with a <a>Mutable</a>
--   instance, giving it a "non-piecewise" instance. Can be useful for
--   avoiding orphan instances yet still utilizing auto-deriving features,
--   or for overwriting the <a>Mutable</a> instance of other instances.
--   
--   For example, let's say you want to auto-derive an instance for your
--   data type:
--   
--   <pre>
--   data MyType = MT Int Double OtherType
--     deriving Generic
--   </pre>
--   
--   This is possible if all of <tt>MyType</tt>s fields have <a>Mutable</a>
--   instances. However, let's say <tt>OtherType</tt> comes from an
--   external library that you don't have control over, and so you cannot
--   give it a <a>Mutable</a> instance without incurring an orphan
--   instance.
--   
--   One solution is to wrap it in <a>MutRef</a>:
--   
--   <pre>
--   data MyType = MT Int Double (<a>MutRef</a> OtherType)
--     deriving Generic
--   </pre>
--   
--   This can then be auto-derived:
--   
--   <pre>
--   instance Mutable m MyType where
--       type Ref m MyType = GRef m MyType
--   </pre>
--   
--   It can also be used to <i>override</i> a <a>Mutable</a> instance. For
--   example, even if the <a>Mutable</a> instance of <tt>SomeType</tt> is
--   piecewise-mutable, the <a>Mutable</a> instance of <tt><a>MutRef</a>
--   SomeType</tt> will be not be piecewise.
newtype MutRef a
MutRef :: a -> MutRef a
[getMutRef] :: MutRef a -> a

-- | A handy newtype wrapper that allows you to partially apply <a>Ref</a>.
--   <tt><a>RefFor</a> m a</tt> is the same as <tt><a>Ref</a> m a</tt>, but
--   can be partially applied.
--   
--   If used with <a>HKD</a>, you can treat this syntactically identically
--   as a <tt><a>Ref</a> m a</tt>.
newtype RefFor m a
RefFor :: Ref m a -> RefFor m a
[getRefFor] :: RefFor m a -> Ref m a

-- | The default implementations of <a>thawRef</a>, <a>freezeRef</a>, and
--   <a>copyRef</a> dispatched for different choices of <a>Ref</a>.
--   
--   Basically, by specifying <a>Ref</a>, you get the rest of the instance
--   for free.
--   
--   <pre>
--   -- default, if you don't specify <a>Ref</a>
--   instance Mutable m MyType
--   
--   -- the above is the same as:
--   instance Mutable m MyType
--       type Ref m MyType = MutVar (PrimState m) MyType
--   
--   -- or if we have an instance of <a>Generic</a>:
--   instance Mutable m MyType
--       type Ref m MyType = GRef m MyType
--   
--   -- or, using the higher-kinded data pattern, like
--   -- <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>
--   instance Mutable m (MyTypeF Identity)
--       type Ref m (MyTypeF Identity) = MyTypeF (RefFor m)
--   </pre>
class DefaultMutable m a r

-- | Automatically generate a piecewise mutable reference for any
--   <a>Generic</a> instance.
--   
--   <pre>
--   -- | any <a>Generic</a> instance
--   data Foo = Foo { fInt :: Int, fDouble :: Double }
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 4.5
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> #fInt) r
--   3
--   ghci&gt; <a>copyPart</a> (fieldMut #fDouble) 1.23
--   ghci&gt; freezeRef r
--   Foo 3 1.23
--   </pre>
--   
--   Note that this is basically just a bunch of tupled refs for a product
--   type. For a sum type (with multiple constructors), an extra layer of
--   indirection is added to account for the dynamically changable shape.
--   
--   See <a>fieldMut</a>/<a>posMut</a> for ways to inspect and mutate the
--   internals of this type (as demonstrated above).
data GRef m a

-- | A <a>MutVar</a> behaves like a single-element mutable array associated
--   with a primitive state token.
data MutVar s a

-- | A <a>Ref</a> that works by using the <a>Mutable</a> instance of an
--   equivalent type. This is useful for newtype wrappers, so you can use
--   the underlying data type's <a>Mutable</a> instance.
--   
--   <pre>
--   newtype MyVec = MyVec (<a>Vector</a> Double)
--   
--   instance <a>Mutable</a> m MyVec where
--       type <a>Ref</a> m MyVec = <a>CoerceRef</a> m s (<a>Vector</a> Double)
--   </pre>
--   
--   The <tt>Ref m MyVec</tt> uses the a <tt><a>MVector</a> Double</tt>
--   under the hood.
--   
--   It's essentially a special case of <a>GRef</a> for newtypes.
data CoerceRef m s a

-- | A <a>Ref</a> that works for any instance of <a>Traversable</a>, by
--   using the fields of the <a>Traversable</a> instance to <i>purely</i>
--   store mutable references.
--   
--   Copying and modifying semantics can be a bit funky.
--   
--   <ul>
--   <li>If copying a shorter item into a longer item ref, the "leftovers"
--   items in the longer item are unchanged.</li>
--   <li>If copying a longer item into a shorter item ref, the leftover
--   items are unchanged.</li>
--   </ul>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawTraverse</a> [1..10]
--   ghci&gt; <a>copyTraverse</a> r [0,0,0,0]
--   ghci&gt; <a>freezeTraverse</a> r
--   [0,0,0,0,5,6,7,8,9,10]
--   ghci&gt; <a>copyTraverse</a> r [20..50]
--   ghci&gt; <a>freezeTraverse</a> r
--   [20,21,22,23,24,25,26,27,28,29]
--   </pre>
data TraverseRef m f a

-- | A <a>Ref</a> for instances of <a>GMutable</a>, which are the
--   <a>GHC.Generics</a> combinators.
data GMutableRef m f a

-- | Default <a>copyRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
thawHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z Identity -> m (z (RefFor m))

-- | Default <a>freezeRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
freezeHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z (RefFor m) -> m (z Identity)

-- | Default <a>copyRef</a> for the higher-kinded data pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>.
--   
--   You likely won't ever use this directly, since it is automatically
--   provided if you have a <a>Mutable</a> instance with <tt>z
--   (<a>RefFor</a> m)</tt> as the <a>Ref</a>. However, it can be useful if
--   you are using a <tt>z (<a>RefFor</a> m)</tt> just as a normal data
--   type, independent of the <a>Ref</a> class. See documentation for
--   <a>Mutable</a> for more information.
copyHKD :: forall z m. (Generic (z Identity), Generic (z (RefFor m)), GMutable m (Rep (z Identity)), GRef_ m (Rep (z Identity)) ~ Rep (z (RefFor m))) => z (RefFor m) -> z Identity -> m ()

-- | A <tt><a>MutPart</a> m s a</tt> is a way to "zoom into" an <tt>a</tt>,
--   as a part of a mutable reference on <tt>s</tt>. This allows you to
--   only modify a single <tt>a</tt> part of the <tt>s</tt>, without
--   touching the rest.
--   
--   An example that is commonly found in the ecosystem is something like
--   (flipped) <tt>write :: Int -&gt; <a>MVector</a> s a -&gt; a -&gt; m
--   ()</tt> from <a>Data.Vector.Mutable</a> --- <tt>write 3 ::
--   <a>MVector</a> s a -&gt; a -&gt; m ()</tt>, for instance, lets you
--   modify a specific part of the vector without touching the rest.
--   
--   You would <i>use</i> a <a>MutPart</a> using <a>freezePart</a>,
--   <a>copyPart</a>, <a>modifyPart</a>, etc.
--   
--   For non-composite types, there won't really be any meaningful values.
--   However, we have them for many composite types. For example, for
--   tuples:
--   
--   <pre>
--   <a>mutFst</a> :: <a>MutPart</a> m (a, b) a
--   <a>mutSnd</a> :: MutPart m (a, b) b
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (2, 4)
--   ghci&gt; <a>copyPart</a> mutFst r 100
--   ghci&gt; <a>freezeRef</a> r
--   (100, 4)
--   </pre>
--   
--   If you are using <a>GRef</a> as an automatically-defined mutable
--   reference, then the easiest way to create these for your mutable types
--   are with <a>fieldMut</a> and <a>posMut</a>.
--   
--   If you are using the "Higher-kinded data" pattern, then there's an
--   easy way to generate a <a>MutPart</a> for every single field, if you
--   have a product type --- see <a>hkdMutParts</a> for more information.
newtype MutPart m s a
MutPart :: (Ref m s -> Ref m a) -> MutPart m s a
[getMutPart] :: MutPart m s a -> Ref m s -> Ref m a

-- | Using a <a>MutPart</a>, perform a function on a <tt><a>Ref</a> m
--   s</tt> as if you had a <tt><a>Ref</a> m a</tt>.
withMutPart :: MutPart m s a -> Ref m s -> (Ref m a -> m b) -> m b

-- | With a <a>MutPart</a>, read out a specific part of a <a>Ref</a>.
freezePart :: Mutable m a => MutPart m s a -> Ref m s -> m a

-- | With a <a>MutPart</a>, overwrite into a specific part of a <a>Ref</a>.
copyPart :: Mutable m a => MutPart m s a -> Ref m s -> a -> m ()

-- | With a <a>MutPart</a>, modify a specific part of a <a>Ref</a> with a
--   pure function.
modifyPart :: Mutable m a => MutPart m s a -> Ref m s -> (a -> a) -> m ()

-- | <a>modifyPart</a>, but forces the result before storing it back in the
--   reference.
modifyPart' :: Mutable m a => MutPart m s a -> Ref m s -> (a -> a) -> m ()

-- | <a>updateRef</a>, under a <a>MutPart</a> to only modify a specific
--   part of a <a>Ref</a>.
updatePart :: Mutable m a => MutPart m s a -> Ref m s -> (a -> (a, b)) -> m b

-- | <a>updatePart</a>, but forces the result before storing it back in the
--   reference.
updatePart' :: Mutable m a => MutPart m s a -> Ref m s -> (a -> (a, b)) -> m b

-- | <a>MutPart</a> into the first field of a tuple reference.
mutFst :: MutPart m (a, b) a

-- | <a>MutPart</a> into the second field of a tuple reference.
mutSnd :: MutPart m (a, b) b

-- | Create a <a>MutPart</a> for a field name. Should work for any type
--   with one constructor whose mutable reference is <a>GRef</a>.
--   
--   Is meant to be used with OverloadedLabels:
--   
--   <pre>
--   data Foo = Foo { fInt :: Int, fDouble :: Double }
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> #fInt) r
--   3
--   ghci&gt; <a>copyPart</a> (fieldMut #fDouble) 1.23
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 1.23
--   </pre>
--   
--   However, you can use it without OverloadedLabels by using <a>Label</a>
--   with TypeApplications:
--   
--   <pre>
--   ghci&gt; <a>freezePart</a> (<a>fieldMut</a> (<a>Label</a> @"fInt")) r
--   3
--   </pre>
--   
--   This and <a>posMut</a> are the main ways to generate a <a>MutPart</a>
--   for a type whose mutable reference is <a>GRef</a>.
fieldMut :: FieldMut fld m s a => Label fld -> MutPart m s a

-- | Proxy for label type
data Label (a :: Symbol)
Label :: Label (a :: Symbol)

-- | Create a <a>MutPart</a> for a position in a sum type. Should work for
--   any type with one constructor whose mutable reference is <a>GRef</a>.
--   
--   Meant to be used with TypeApplications:
--   
--   <pre>
--   data Foo = Foo Int Double
--     deriving (Generic, Show)
--   
--   instance Mutable m Foo where
--       type Ref m Foo = <a>GRef</a> m Foo
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> (Foo 3 4.5)
--   ghci&gt; <a>freezePart</a> (<a>posMut</a> <tt>1) r
--   3
--   ghci&gt; <a>copyPart</a> (posMut </tt>2) 1.23
--   ghci&gt; <a>freezeRef</a> r
--   Foo 3 1.23
--   </pre>
--   
--   This and <a>fieldMut</a> are the main ways to generate a
--   <a>MutPart</a> for a type whose mutable reference is <a>GRef</a>.
posMut :: PosMut i m s a => MutPart m s a

-- | If you are using the "higher-kinded data" pattern, a la
--   <a>https://reasonablypolymorphic.com/blog/higher-kinded-data/</a>, and
--   you have the appropriate instance for <a>Ref</a>, then you can use
--   this to generate a <a>MutPart</a> for every field, if you have a type
--   with only one constructor.
--   
--   <pre>
--   data MyTypeF f = MT
--        { fInt    :: f Int
--        , fDouble :: f Double
--        }
--     deriving Generic
--   
--   instance Mutable (MyTypeF <a>Identity</a>) where
--       type Ref (MyTypeF <a>Identity</a>) = MyTypeF (<a>RefFor</a> m)
--   
--   mx :: MutPart (MyTypeF Identity) (<a>Vector</a> Int)
--   my :: MutPart (MyTypeF Identity) (V.Vector Double)
--   MT mx my = hkdMutParts @MyTypeF
--   </pre>
--   
--   <pre>
--   ghci&gt; r &lt;- thawRef (MT 3 4.5)
--   ghci&gt; <a>freezePart</a> mx r
--   3
--   ghci&gt; <a>copyPart</a> (fDouble (hkdMutParts @MyTypeF)) r 12.3
--   ghci&gt; <a>freezeRef</a> r
--   MT 3 12.3
--   </pre>
hkdMutParts :: forall z m. (Generic (z (RefFor m)), Generic (z (MutPart m (z Identity))), HKDMutParts m z (Rep (z (RefFor m))) (Rep (z (MutPart m (z Identity))))) => z (MutPart m (z Identity))

-- | A <a>MutPart</a> to get into a <a>CoerceRef</a>.
coerceRef :: Ref m s ~ CoerceRef m s a => MutPart m s a

-- | A <a>MutPart</a> for a field in a vinyl <a>Rec</a>, automatically
--   generated as the first field with a matching type. This is polymorphic
--   to work over both <a>Rec</a> and <a>ARec</a>.
--   
--   <pre>
--   ghci&gt; r &lt;- <a>thawRef</a> $ [1,2,3] <a>:&amp;</a> [True, False] :&amp; <a>RNil</a>
--   ghci&gt; modifyPart (mutRec @Bool) r reverse
--   ghci&gt; freezeRef r
--   [1,2,3] :&amp; [False, True] :&amp; RNil
--   </pre>
mutRec :: forall a as f rec m. (Ref m (rec f as) ~ rec (RecRef m f) as, RecElem rec a a as as (RIndex a as), RecElemFCtx rec (RecRef m f)) => MutPart m (rec f as) (f a)

-- | Class of monads which can perform primitive state-transformer actions
class Monad m => PrimMonad (m :: Type -> Type)

-- | State token type
type family PrimState (m :: Type -> Type)
